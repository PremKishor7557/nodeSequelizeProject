{
  "stats": {
    "suites": 4,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-09T13:24:35.715Z",
    "end": "2024-09-09T13:24:35.981Z",
    "duration": 266,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7c36cfb3-08f7-414c-8acf-31e15ca58e33",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eda4aa13-a337-45b8-a4d3-2edbbd6bc045",
          "title": "GET /users/:id - Fetch Single User",
          "fullFile": "C:\\Users\\shank\\nodeSequelize\\test\\users.js",
          "file": "\\test\\users.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /users/:id - Fetch Single User\"",
              "fullTitle": "GET /users/:id - Fetch Single User \"before all\" hook in \"GET /users/:id - Fetch Single User\"",
              "timedOut": false,
              "duration": 58,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await chai.request(app).get('/users/users'); // Adjust the endpoint to list users\nif (res.body && res.body.data && res.body.data.length > 0) {\n  validUserId = res.body.data[0].id; // Use an existing user's ID for the test\n} else {\n  throw new Error('No user found in the database.');\n}",
              "err": {},
              "uuid": "d7861888-9203-4ba0-88df-35bfb7994a2b",
              "parentUUID": "eda4aa13-a337-45b8-a4d3-2edbbd6bc045",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should fetch a single user with valid ID",
              "fullTitle": "GET /users/:id - Fetch Single User should fetch a single user with valid ID",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get(`/users/users/${validUserId}`)\n  .end((err, res) => {\n    expect(err).to.be.null;\n    expect(res).to.have.status(200);\n    expect(res.body).to.have.property('data');\n    expect(res.body.data).to.have.property('firstName');\n    expect(res.body.data).to.have.property('lastName');\n    expect(res.body.data).to.have.property('fullName');\n    done();\n  });",
              "err": {},
              "uuid": "36659394-3291-42ac-9a39-341b3a85cd02",
              "parentUUID": "eda4aa13-a337-45b8-a4d3-2edbbd6bc045",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when user is not found",
              "fullTitle": "GET /users/:id - Fetch Single User should return 404 when user is not found",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get(`/users/users/${invalidUserId}`)\n  .end((err, res) => {\n    expect(err).to.be.null;\n    expect(res).to.have.status(404);\n    expect(res.body).to.have.property('message');\n    expect(res.body.message).to.equal('User not found'); // Ensure the message matches your implementation\n    done();\n  });",
              "err": {},
              "uuid": "e581eb4e-5b6e-4549-90a1-ecadaa81082f",
              "parentUUID": "eda4aa13-a337-45b8-a4d3-2edbbd6bc045",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "36659394-3291-42ac-9a39-341b3a85cd02",
            "e581eb4e-5b6e-4549-90a1-ecadaa81082f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "26d890e5-5c01-403c-bf32-1517fc3f2064",
          "title": "POST /users - Single User Creation",
          "fullFile": "C:\\Users\\shank\\nodeSequelize\\test\\users.js",
          "file": "\\test\\users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a single user with valid data",
              "fullTitle": "POST /users - Single User Creation should create a single user with valid data",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: 'arun',\n  lastName: 'kumar'\n};\n\nchai.request(app)\n  .post('/users/users')\n  .send(user)\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body.data).to.be.an('object');\n    expect(res.body.data.firstName).to.equal('Mr. ARUN');\n    expect(res.body.data.lastName).to.equal('kumar ,Indian');\n    done();\n  });",
              "err": {},
              "uuid": "d8d0d07e-c26f-4f72-b45e-785dd639e64b",
              "parentUUID": "26d890e5-5c01-403c-bf32-1517fc3f2064",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail validation if firstName contains numbers",
              "fullTitle": "POST /users - Single User Creation should fail validation if firstName contains numbers",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: 'narayan123',\n  lastName: 'kumar'\n};\n\nchai.request(app)\n  .post('/users/users')\n  .send(user)\n  .end((err, res) => {\n    expect(res).to.have.status(400); // Assuming 400 status code for validation error\n    expect(res.body).to.have.property('errors');\n    expect(res.body.errors[0].msg).to.equal('Only alphabets are allowed');\n    done();\n  });",
              "err": {},
              "uuid": "2e84cafc-82cc-4f04-8423-e206c3c3bb65",
              "parentUUID": "26d890e5-5c01-403c-bf32-1517fc3f2064",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d8d0d07e-c26f-4f72-b45e-785dd639e64b",
            "2e84cafc-82cc-4f04-8423-e206c3c3bb65"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a9fc3483-6316-4c57-b68b-7abe3f62552b",
          "title": "PATCH /users/:id - Update User",
          "fullFile": "C:\\Users\\shank\\nodeSequelize\\test\\users.js",
          "file": "\\test\\users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update a user with valid data",
              "fullTitle": "PATCH /users/:id - Update User should update a user with valid data",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n  firstName: 'janee',  // This should be transformed to 'Mr. JANE'\n  lastName: 'smith',  // This should be transformed to 'smith ,Indian'\n};\n  \nchai.request(app)\n  .patch('/users/users/1') // Assuming user with id 1 exists\n  .send(updatedUser)\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body.data).to.be.an('array');\n    expect(res.body.data[0]).to.equal(1);  // Sequelize `update()` returns the number of updated rows\n    done();\n  });",
              "err": {},
              "uuid": "0f578bb8-9ef2-45bb-b41e-36b5bc4fb5db",
              "parentUUID": "a9fc3483-6316-4c57-b68b-7abe3f62552b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail validation if firstName contains numbers",
              "fullTitle": "PATCH /users/:id - Update User should fail validation if firstName contains numbers",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n  firstName: 'janee123',  // Invalid as per model validation\n  lastName: 'smith',\n};\n  \nchai.request(app)\n  .patch('/users/users/1')\n  .send(updatedUser)\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    expect(res.body).to.have.property('errors');\n    expect(res.body.errors[0].msg).to.equal('Only alphabets are allowed');\n    done();\n  });",
              "err": {},
              "uuid": "e0fa7e88-db19-4cf5-8605-9c7d34305f13",
              "parentUUID": "a9fc3483-6316-4c57-b68b-7abe3f62552b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail validation if firstName is too short",
              "fullTitle": "PATCH /users/:id - Update User should fail validation if firstName is too short",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n  firstName: 'j',  // Length less than the minimum (2)\n  lastName: 'smith',\n};\n  \nchai.request(app)\n  .patch('/users/users/1')\n  .send(updatedUser)\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    expect(res.body).to.have.property('errors');\n    expect(res.body.errors[0].msg).to.contain('min 2 max 10 characters allowed');\n    done();\n  });",
              "err": {},
              "uuid": "cedc8468-7de8-4529-b593-60e104890bde",
              "parentUUID": "a9fc3483-6316-4c57-b68b-7abe3f62552b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0f578bb8-9ef2-45bb-b41e-36b5bc4fb5db",
            "e0fa7e88-db19-4cf5-8605-9c7d34305f13",
            "cedc8468-7de8-4529-b593-60e104890bde"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ae1d9904-d463-4b8e-8225-769d0041a650",
          "title": "DELETE /users/:id - Delete User",
          "fullFile": "C:\\Users\\shank\\nodeSequelize\\test\\users.js",
          "file": "\\test\\users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete a user with a valid ID",
              "fullTitle": "DELETE /users/:id - Delete User should delete a user with a valid ID",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .delete(`/users/users/${validUserId}`)\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body).to.have.property('data');\n    expect(res.body.data).to.equal(1); // Sequelize's `destroy` returns number of deleted rows\n    done();\n  });",
              "err": {},
              "uuid": "6cf508ea-c911-43ff-b139-cff53c105ee3",
              "parentUUID": "ae1d9904-d463-4b8e-8225-769d0041a650",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when trying to delete a non-existent user",
              "fullTitle": "DELETE /users/:id - Delete User should return 404 when trying to delete a non-existent user",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .delete(`/users/users/${invalidUserId}`)\n  .end((err, res) => {\n    expect(res).to.have.status(404);\n    expect(res.body).to.have.property('message');\n    expect(res.body.message).to.equal('User not found'); // Ensure this matches your actual response\n    done();\n  });",
              "err": {},
              "uuid": "ceca6b89-3b61-4d1f-ba03-4abcc7b69b1d",
              "parentUUID": "ae1d9904-d463-4b8e-8225-769d0041a650",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6cf508ea-c911-43ff-b139-cff53c105ee3",
            "ceca6b89-3b61-4d1f-ba03-4abcc7b69b1d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "Report",
        "": true
      },
      "version": "6.2.0"
    }
  }
}