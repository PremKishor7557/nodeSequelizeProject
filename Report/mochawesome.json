{
  "stats": {
    "suites": 3,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-09T12:00:06.626Z",
    "end": "2024-09-09T12:00:06.951Z",
    "duration": 325,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f3d23b0b-6c75-4de8-ae31-c7cad2837a53",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2e6ff12c-bb63-4e16-825b-4b071ad880a3",
          "title": "POST /users - Single User Creation",
          "fullFile": "C:\\Users\\shank\\nodeSequelize\\tests\\users.js",
          "file": "\\tests\\users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a single user with valid data",
              "fullTitle": "POST /users - Single User Creation should create a single user with valid data",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: 'arun',\n  lastName: 'kumar'\n};\n\nchai.request(app)\n  .post('/users/users')\n  .send(user)\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body.data).to.be.an('object');\n    expect(res.body.data.firstName).to.equal('Mr. ARUN');\n    expect(res.body.data.lastName).to.equal('kumar ,Indian');\n    done();\n  });",
              "err": {},
              "uuid": "075a1e26-9329-4366-9055-cfe913e6bafc",
              "parentUUID": "2e6ff12c-bb63-4e16-825b-4b071ad880a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail validation if firstName contains numbers",
              "fullTitle": "POST /users - Single User Creation should fail validation if firstName contains numbers",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  firstName: 'narayan123',\n  lastName: 'kumar'\n};\n\nchai.request(app)\n  .post('/users/users')\n  .send(user)\n  .end((err, res) => {\n    expect(res).to.have.status(400); // Assuming 400 status code for validation error\n    expect(res.body).to.have.property('errors');\n    expect(res.body.errors[0].msg).to.equal('Only alphabets are allowed');\n    done();\n  });",
              "err": {},
              "uuid": "3bb75de4-9e4b-4bb0-af6d-d5ef2734eb68",
              "parentUUID": "2e6ff12c-bb63-4e16-825b-4b071ad880a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "075a1e26-9329-4366-9055-cfe913e6bafc",
            "3bb75de4-9e4b-4bb0-af6d-d5ef2734eb68"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 101,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8db17752-3a01-4fa1-9f2f-ad9e151292ba",
          "title": "PATCH /users/:id - Update User",
          "fullFile": "C:\\Users\\shank\\nodeSequelize\\tests\\users.js",
          "file": "\\tests\\users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update a user with valid data",
              "fullTitle": "PATCH /users/:id - Update User should update a user with valid data",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n  firstName: 'janee',  // This should be transformed to 'Mr. JANE'\n  lastName: 'smith',  // This should be transformed to 'smith ,Indian'\n};\n  \nchai.request(app)\n  .patch('/users/users/1') // Assuming user with id 1 exists\n  .send(updatedUser)\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body.data).to.be.an('array');\n    expect(res.body.data[0]).to.equal(1);  // Sequelize `update()` returns the number of updated rows\n    done();\n  });",
              "err": {},
              "uuid": "2711891e-55bf-4bc7-bf5a-64cde79168b6",
              "parentUUID": "8db17752-3a01-4fa1-9f2f-ad9e151292ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail validation if firstName contains numbers",
              "fullTitle": "PATCH /users/:id - Update User should fail validation if firstName contains numbers",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n  firstName: 'janee123',  // Invalid as per model validation\n  lastName: 'smith',\n};\n  \nchai.request(app)\n  .patch('/users/users/1')\n  .send(updatedUser)\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    expect(res.body).to.have.property('errors');\n    expect(res.body.errors[0].msg).to.equal('Only alphabets are allowed');\n    done();\n  });",
              "err": {},
              "uuid": "1be624a1-3ffa-40e7-b93f-6890d9bca7c1",
              "parentUUID": "8db17752-3a01-4fa1-9f2f-ad9e151292ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail validation if firstName is too short",
              "fullTitle": "PATCH /users/:id - Update User should fail validation if firstName is too short",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n  firstName: 'j',  // Length less than the minimum (2)\n  lastName: 'smith',\n};\n  \nchai.request(app)\n  .patch('/users/users/1')\n  .send(updatedUser)\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    expect(res.body).to.have.property('errors');\n    expect(res.body.errors[0].msg).to.contain('min 2 max 10 characters allowed');\n    done();\n  });",
              "err": {},
              "uuid": "50ea065b-4e87-4894-8762-18efa3adb92d",
              "parentUUID": "8db17752-3a01-4fa1-9f2f-ad9e151292ba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2711891e-55bf-4bc7-bf5a-64cde79168b6",
            "1be624a1-3ffa-40e7-b93f-6890d9bca7c1",
            "50ea065b-4e87-4894-8762-18efa3adb92d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 78,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eec8f5c9-3b53-40b3-871f-75bd0cbd5e84",
          "title": "DELETE /users/:id - Delete User",
          "fullFile": "C:\\Users\\shank\\nodeSequelize\\tests\\users.js",
          "file": "\\tests\\users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete a user with a valid ID",
              "fullTitle": "DELETE /users/:id - Delete User should delete a user with a valid ID",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .delete(`/users/users/${validUserId}`)\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body).to.have.property('data');\n    expect(res.body.data).to.equal(1); // Sequelize's `destroy` returns number of deleted rows\n    done();\n  });",
              "err": {},
              "uuid": "fcf544db-b9ba-4f39-b263-0067bb9b8f45",
              "parentUUID": "eec8f5c9-3b53-40b3-871f-75bd0cbd5e84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when trying to delete a non-existent user",
              "fullTitle": "DELETE /users/:id - Delete User should return 404 when trying to delete a non-existent user",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .delete(`/users/users/${invalidUserId}`)\n  .end((err, res) => {\n    expect(res).to.have.status(404);\n    expect(res.body).to.have.property('message');\n    expect(res.body.message).to.equal('User not found'); // Ensure this matches your actual response\n    done();\n  });",
              "err": {},
              "uuid": "8644ec77-fc3a-442a-a7a0-c5337d655aeb",
              "parentUUID": "eec8f5c9-3b53-40b3-871f-75bd0cbd5e84",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fcf544db-b9ba-4f39-b263-0067bb9b8f45",
            "8644ec77-fc3a-442a-a7a0-c5337d655aeb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 45,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "Report",
        "": true
      },
      "version": "6.2.0"
    }
  }
}